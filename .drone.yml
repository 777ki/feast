kind: pipeline
name: default

steps:

# Retrieve cache for Maven and Go dependencies for faster build
# ============================================================

- name: restore_cache
  image: homerovalle/drone-gcs-cache
  settings:
    pull: true
    bucket: feast-templocation-kf-feast
    path: feast-templocation-kf-feast/feast-mvn-cache
    restore: true
    json_key:
      from_secret: google_credentials

# Run unit tests for Feast components
# ============================================================

- name: test_feast_core 
  image: maven:3.6-jdk-8-slim
  environment:
    MAVEN_OPTS: "-Dmaven.repo.local=.m2 -DdependencyLocationsEnabled=false"
  commands:
  - mvn --projects core test
  depends_on: [ restore_cache ]

- name: test_feast_serving
  image: maven:3.6-jdk-8-slim
  environment:
    MAVEN_OPTS: "-Dmaven.repo.local=.m2 -DdependencyLocationsEnabled=false"
  commands:
  - mvn --projects serving test
  depends_on: [ restore_cache ]

- name: test_feast_ingestion
  image: maven:3.6-jdk-8-slim
  environment:
    MAVEN_OPTS: "-Dmaven.repo.local=.m2 -DdependencyLocationsEnabled=false"
  commands:
  - mvn --projects ingestion test
  depends_on: [ restore_cache ]

- name: test_feast_cli
  image: golang:1.12
  environment:
    GOCACHE: /drone/src/.gocache
  commands:
  - go test ./cli/feast/...
  depends_on: [ restore_cache ]

# Build and publish Docker images for Feast components
# ============================================================

- name: build_feast_core
  image: plugins/gcr:18
  settings:
    dockerfile: Dockerfiles/core/Dockerfile
    build_args:
    - REVISION=${DRONE_COMMIT}
    registry: us.gcr.io
    repo: kf-feast/feast-core
    tags: ${DRONE_COMMIT}
    target: production
    json_key:
      from_secret: google_credentials 
  depends_on: [ restore_cache ]

- name: build_feast_serving
  image: plugins/gcr:18
  settings:
    dockerfile: Dockerfiles/serving/Dockerfile
    build_args:
    - REVISION=${DRONE_COMMIT}
    registry: us.gcr.io
    repo: kf-feast/feast-serving
    tags: ${DRONE_COMMIT}
    target: production
    json_key:
      from_secret: google_credentials
  depends_on: [ restore_cache ]

- name: build_feast_cli
  image: golang:1.12
  environment:
    GOCACHE: /drone/src/.gocache
  commands: 
  - go build -o ./cli/build/feast ./cli/feast
  depends_on: [ restore_cache ]

# Run integration tests
# ============================================================

- name: integration_test_prepare
  image: devth/helm:v2.13.1
  environment:
    FEAST_IMAGE_TAG: ${DRONE_COMMIT}
    FEAST_WAREHOUSE_DATASET: feast_build_${DRONE_BUILD_NUMBER}
    FEAST_CORE_URL: build-${DRONE_BUILD_NUMBER}.feast.dragonin.me:80
    FEAST_SERVING_URL: build-${DRONE_BUILD_NUMBER}.feast.dragonin.me:80
    FEAST_RELEASE_NAME: feast-${DRONE_BUILD_NUMBER}
    BATCH_IMPORT_DATA_GCS_PATH: gs://feast-templocation-kf-feast/build_${DRONE_BUILD_NUMBER}/integration-tests/testdata/feature_values/ingestion_1.csv
    KAFKA_BROKERS: 10.128.0.55:31090
    KAFKA_TOPICS: feast_build_${DRONE_BUILD_NUMBER}
    JSON_KEY:
      from_secret: google_credentials
  commands:
  - FEAST_HOME=$(pwd)

  # Authenticate to Google Cloud and Kube cluster
  - printf "%s\n" "$JSON_KEY" > /etc/service-account.json
  - gcloud auth activate-service-account --key-file /etc/service-account.json
  - gcloud container clusters get-credentials feast-test-cluster --zone us-central1-a --project kf-feast
  - unset JSON_KEY

  # Install Feast with Helm using Feast images built from previous build steps
  - cd $FEAST_HOME/integration-tests
  - envsubst < feast-helm-values.yaml.template > feast-helm-values.yaml
  - helm install --name $FEAST_RELEASE_NAME --wait --timeout 210 ../charts/feast -f feast-helm-values.yaml

  # Ensure unique import jobs for every CI build by parameterizing job properties with CI environment
  - cd $FEAST_HOME/integration-tests/testdata/import_specs
  - envsubst < batch_from_gcs.yaml.template > batch_from_gcs.yaml
  - envsubst < stream_from_kafka.yaml.template > stream_from_kafka.yaml

  # Prepare BigQuery dataset and remote batch import data in Cloud Storage
  - bq mk --dataset $FEAST_WAREHOUSE_DATASET
  - gsutil cp $FEAST_HOME/integration-tests/testdata/feature_values/ingestion_1.csv $BATCH_IMPORT_DATA_GCS_PATH
  depends_on: [ build_feast_core, build_feast_serving, build_feast_cli ]

- name: integration_test_batch
  image: python:3.7
  environment:
    FEAST_CORE_URL: build-${DRONE_BUILD_NUMBER}.feast.dragonin.me:80
    FEAST_SERVING_URL: build-${DRONE_BUILD_NUMBER}.feast.dragonin.me:80
    FEAST_WAREHOUSE_DATASET: feast_build_${DRONE_BUILD_NUMBER}
  commands:
  - FEAST_HOME=$(pwd)

  # Install and use latest Feast SDK in the integration test
  - pip install -qe $FEAST_HOME/sdk/python
  - pip install -qr $FEAST_HOME/integration-tests/testutils/requirements.txt

  # Use Feast CLI built from "build_feast_cli" step
  - cp ./cli/build/feast /usr/bin/feast
  - feast config set coreURI $FEAST_CORE_URL

  # Register entity and feature specs, then start a batch import job
  - cd $FEAST_HOME/integration-tests/testdata
  - feast apply entity entity_specs/entity_1.yaml
  - feast apply feature feature_specs/entity_1*.yaml
  - feast jobs run import_specs/batch_from_gcs.yaml --wait

  # Ensure correctness of warehouse and serving data
  - cd $FEAST_HOME/integration-tests
  - |
    python -m testutils.validate_feature_values \
      --entity_spec_file=testdata/entity_specs/entity_1.yaml \
      --feature_spec_files=testdata/feature_specs/entity_1*.yaml \
      --expected-warehouse-values-file=testdata/feature_values/ingestion_1.csv \
      --expected-serving-values-file=testdata/feature_values/serving_1.csv \
      --bigquery-dataset-for-warehouse=$FEAST_WAREHOUSE_DATASET \
      --feast-serving-url=$FEAST_SERVING_URL
  depends_on: [ integration_test_prepare ]

- name: integration_test_streaming
  image: python:3.7
  environment:
    FEAST_CORE_URL: build-${DRONE_BUILD_NUMBER}.feast.dragonin.me:80
    FEAST_SERVING_URL: build-${DRONE_BUILD_NUMBER}.feast.dragonin.me:80
    KAFKA_BROKERS: 10.128.0.55:31090
    KAFKA_TOPICS: feast_build_${DRONE_BUILD_NUMBER}
  commands:
  - FEAST_HOME=$(pwd)

  # Install and use latest Feast SDK in the integration test
  - pip install -qe $FEAST_HOME/sdk/python
  - pip install -qr $FEAST_HOME/integration-tests/testutils/requirements.txt

  # Use Feast CLI built from "build_feast_cli" step
  - cp ./cli/build/feast /usr/bin/feast
  - feast config set coreURI $FEAST_CORE_URL

  # Register entity and feature specs, then start a streaming import job
  - cd $FEAST_HOME/integration-tests/testdata
  - feast apply entity entity_specs/entity_2.yaml
  - feast apply feature feature_specs/entity_2*.yaml
  # Assume Feast Core is configured to use DirectRunner
  # Hence we run "feast jobs" in background (because process will not return 
  # unlike when using DataflowRunner), then wait about 20 seconds
  # which is normally long enough for Feast job to start listening to Kafka streams
  - feast jobs run import_specs/stream_from_kafka.yaml &
  - sleep 20

  # Produce streaming feature values for ingestion
  # Normally it will take ~20 seconds for the values to appear in Feast Serving
  - cd $FEAST_HOME/integration-tests
  - |
    python -m testutils.kafka_producer \
      --bootstrap_servers=$KAFKA_BROKERS \
      --topic=$KAFKA_TOPICS \
      --entity_spec_file=testdata/entity_specs/entity_2.yaml \
      --feature_spec_files=testdata/feature_specs/entity_2*.yaml \
      --feature_values_file=testdata/feature_values/ingestion_2.csv
  - sleep 20

  # Ensure correctness of serving data
  # 
  # NOTE: Ignore checking correctness of warehouse data because with streaming 
  # data it can take ~20 minutes for the data to be avaiable in warehouse,
  # a bit too long for the CI build job
  # 
  # TODO: Consider a way to shorten the wait duration in Feast Ingestion
  # before loading the feature values to BigQuery so we can validate serving data too here.
  - cd $FEAST_HOME/integration-tests
  - |
    python -m testutils.validate_feature_values \
      --entity_spec_file=testdata/entity_specs/entity_2.yaml \
      --feature_spec_files=testdata/feature_specs/entity_2*.yaml \
      --expected-serving-values-file=testdata/feature_values/serving_2.csv \
      --feast-serving-url=$FEAST_SERVING_URL
  depends_on: [ integration_test_batch ]

- name: integration_test_cleanup
  image: devth/helm:v2.13.1
  environment:
    FEAST_WAREHOUSE_DATASET: feast_build_${DRONE_BUILD_NUMBER}
    JSON_KEY:
      from_secret: google_credentials
  commands:
  # Authentication to Google Cloud and Kube cluster
  - printf "%s\n" "$JSON_KEY" > /etc/service-account.json
  - gcloud auth activate-service-account --key-file /etc/service-account.json
  - gcloud container clusters get-credentials feast-test-cluster --zone us-central1-a --project kf-feast

  - helm delete --purge feast-$DRONE_BUILD_NUMBER
  - bq rm -rf --dataset $FEAST_WAREHOUSE_DATASET
  depends_on: [ integration_test_batch, integration_test_streaming ]
  when:
    status: [ success, failure ]

# Save build dependencies to cache for faster future builds
# ============================================================

- name: rebuild_cache
  image: homerovalle/drone-gcs-cache
  settings:
    pull: true
    bucket: feast-templocation-kf-feast
    path: feast-templocation-kf-feast/feast-mvn-cache
    rebuild: true
    json_key:
      from_secret: google_credentials
    mount: 
    - .m2
    - .gocache
  depends_on:
  - test_feast_core
  - test_feast_serving
  - test_feast_ingestion
  - test_feast_cli
  when:
    status: [ success, failure ]
