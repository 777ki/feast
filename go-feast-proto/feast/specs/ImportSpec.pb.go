// Code generated by protoc-gen-go. DO NOT EDIT.
// source: feast/specs/ImportSpec.proto

package specs // import "github.com/gojektech/feast/go-feast-proto/feast/specs"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gojektech/feast/go-feast-proto/feast/types"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ImportSpec struct {
	// type should define what sort of store it is
	// pubsub: topic, subscription (already a featureRow)
	// kafka: ? (already a featureRow)
	// file: csv, parquet, json
	// bigquery: table, query
	Type    string            `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Options map[string]string `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// You should probably only set one of these, but if you set both, they concatenate
	Entities             []string `protobuf:"bytes,3,rep,name=entities,proto3" json:"entities,omitempty"`
	Schema               *Schema  `protobuf:"bytes,4,opt,name=schema,proto3" json:"schema,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImportSpec) Reset()         { *m = ImportSpec{} }
func (m *ImportSpec) String() string { return proto.CompactTextString(m) }
func (*ImportSpec) ProtoMessage()    {}
func (*ImportSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_ImportSpec_83b1ff6d7ea8bc36, []int{0}
}
func (m *ImportSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImportSpec.Unmarshal(m, b)
}
func (m *ImportSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImportSpec.Marshal(b, m, deterministic)
}
func (dst *ImportSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportSpec.Merge(dst, src)
}
func (m *ImportSpec) XXX_Size() int {
	return xxx_messageInfo_ImportSpec.Size(m)
}
func (m *ImportSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ImportSpec proto.InternalMessageInfo

func (m *ImportSpec) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ImportSpec) GetOptions() map[string]string {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *ImportSpec) GetEntities() []string {
	if m != nil {
		return m.Entities
	}
	return nil
}

func (m *ImportSpec) GetSchema() *Schema {
	if m != nil {
		return m.Schema
	}
	return nil
}

type Schema struct {
	Fields []*Field `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	// Types that are valid to be assigned to Timestamp:
	//	*Schema_TimestampColumn
	//	*Schema_TimestampValue
	Timestamp            isSchema_Timestamp `protobuf_oneof:"timestamp"`
	EntityIdColumn       string             `protobuf:"bytes,7,opt,name=entityIdColumn,proto3" json:"entityIdColumn,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Schema) Reset()         { *m = Schema{} }
func (m *Schema) String() string { return proto.CompactTextString(m) }
func (*Schema) ProtoMessage()    {}
func (*Schema) Descriptor() ([]byte, []int) {
	return fileDescriptor_ImportSpec_83b1ff6d7ea8bc36, []int{1}
}
func (m *Schema) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Schema.Unmarshal(m, b)
}
func (m *Schema) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Schema.Marshal(b, m, deterministic)
}
func (dst *Schema) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Schema.Merge(dst, src)
}
func (m *Schema) XXX_Size() int {
	return xxx_messageInfo_Schema.Size(m)
}
func (m *Schema) XXX_DiscardUnknown() {
	xxx_messageInfo_Schema.DiscardUnknown(m)
}

var xxx_messageInfo_Schema proto.InternalMessageInfo

func (m *Schema) GetFields() []*Field {
	if m != nil {
		return m.Fields
	}
	return nil
}

type isSchema_Timestamp interface {
	isSchema_Timestamp()
}

type Schema_TimestampColumn struct {
	TimestampColumn string `protobuf:"bytes,5,opt,name=timestampColumn,proto3,oneof"`
}

type Schema_TimestampValue struct {
	TimestampValue *timestamp.Timestamp `protobuf:"bytes,6,opt,name=timestampValue,proto3,oneof"`
}

func (*Schema_TimestampColumn) isSchema_Timestamp() {}

func (*Schema_TimestampValue) isSchema_Timestamp() {}

func (m *Schema) GetTimestamp() isSchema_Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Schema) GetTimestampColumn() string {
	if x, ok := m.GetTimestamp().(*Schema_TimestampColumn); ok {
		return x.TimestampColumn
	}
	return ""
}

func (m *Schema) GetTimestampValue() *timestamp.Timestamp {
	if x, ok := m.GetTimestamp().(*Schema_TimestampValue); ok {
		return x.TimestampValue
	}
	return nil
}

func (m *Schema) GetEntityIdColumn() string {
	if m != nil {
		return m.EntityIdColumn
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Schema) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Schema_OneofMarshaler, _Schema_OneofUnmarshaler, _Schema_OneofSizer, []interface{}{
		(*Schema_TimestampColumn)(nil),
		(*Schema_TimestampValue)(nil),
	}
}

func _Schema_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Schema)
	// timestamp
	switch x := m.Timestamp.(type) {
	case *Schema_TimestampColumn:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.TimestampColumn)
	case *Schema_TimestampValue:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TimestampValue); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Schema.Timestamp has unexpected type %T", x)
	}
	return nil
}

func _Schema_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Schema)
	switch tag {
	case 5: // timestamp.timestampColumn
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Timestamp = &Schema_TimestampColumn{x}
		return true, err
	case 6: // timestamp.timestampValue
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(timestamp.Timestamp)
		err := b.DecodeMessage(msg)
		m.Timestamp = &Schema_TimestampValue{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Schema_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Schema)
	// timestamp
	switch x := m.Timestamp.(type) {
	case *Schema_TimestampColumn:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.TimestampColumn)))
		n += len(x.TimestampColumn)
	case *Schema_TimestampValue:
		s := proto.Size(x.TimestampValue)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Field struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	FeatureId            string   `protobuf:"bytes,2,opt,name=featureId,proto3" json:"featureId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Field) Reset()         { *m = Field{} }
func (m *Field) String() string { return proto.CompactTextString(m) }
func (*Field) ProtoMessage()    {}
func (*Field) Descriptor() ([]byte, []int) {
	return fileDescriptor_ImportSpec_83b1ff6d7ea8bc36, []int{2}
}
func (m *Field) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Field.Unmarshal(m, b)
}
func (m *Field) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Field.Marshal(b, m, deterministic)
}
func (dst *Field) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Field.Merge(dst, src)
}
func (m *Field) XXX_Size() int {
	return xxx_messageInfo_Field.Size(m)
}
func (m *Field) XXX_DiscardUnknown() {
	xxx_messageInfo_Field.DiscardUnknown(m)
}

var xxx_messageInfo_Field proto.InternalMessageInfo

func (m *Field) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Field) GetFeatureId() string {
	if m != nil {
		return m.FeatureId
	}
	return ""
}

func init() {
	proto.RegisterType((*ImportSpec)(nil), "feast.specs.ImportSpec")
	proto.RegisterMapType((map[string]string)(nil), "feast.specs.ImportSpec.OptionsEntry")
	proto.RegisterType((*Schema)(nil), "feast.specs.Schema")
	proto.RegisterType((*Field)(nil), "feast.specs.Field")
}

func init() {
	proto.RegisterFile("feast/specs/ImportSpec.proto", fileDescriptor_ImportSpec_83b1ff6d7ea8bc36)
}

var fileDescriptor_ImportSpec_83b1ff6d7ea8bc36 = []byte{
	// 412 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x52, 0x4b, 0x6f, 0xd3, 0x40,
	0x10, 0xae, 0x93, 0xc6, 0x25, 0x63, 0xd4, 0xa2, 0x05, 0x89, 0x95, 0x55, 0x09, 0x2b, 0x42, 0xc8,
	0x2a, 0xea, 0xae, 0x54, 0x84, 0x04, 0x3d, 0x70, 0x08, 0x0f, 0x35, 0x27, 0x90, 0x0b, 0x1c, 0xb8,
	0x39, 0xce, 0xd8, 0x31, 0xb5, 0xbd, 0x96, 0x77, 0x8d, 0xe4, 0xdf, 0xca, 0x99, 0xff, 0x81, 0x76,
	0xd7, 0x71, 0x9c, 0xdc, 0xe6, 0xf1, 0xcd, 0xe3, 0x9b, 0x6f, 0xe0, 0x32, 0xc5, 0x58, 0x2a, 0x2e,
	0x6b, 0x4c, 0x24, 0x5f, 0x95, 0xb5, 0x68, 0xd4, 0x7d, 0x8d, 0x09, 0xab, 0x1b, 0xa1, 0x04, 0xf1,
	0x4c, 0x96, 0x99, 0xac, 0xff, 0xdc, 0x42, 0x55, 0x57, 0xa3, 0xe4, 0x3f, 0xe3, 0xa2, 0x45, 0x8b,
	0xf2, 0x5f, 0x64, 0x42, 0x64, 0x05, 0x72, 0xe3, 0xad, 0xdb, 0x94, 0xab, 0xbc, 0x44, 0xa9, 0xe2,
	0xb2, 0xb6, 0x80, 0xc5, 0x3f, 0x07, 0x60, 0xdf, 0x9b, 0x10, 0x38, 0xd5, 0x4d, 0xa8, 0x13, 0x38,
	0xe1, 0x3c, 0x32, 0x36, 0xf9, 0x00, 0x67, 0xa2, 0x56, 0xb9, 0xa8, 0x24, 0x9d, 0x04, 0xd3, 0xd0,
	0xbb, 0x79, 0xc9, 0x46, 0xb3, 0xd9, 0x68, 0xb3, 0xaf, 0x16, 0xf6, 0xb9, 0x52, 0x4d, 0x17, 0xed,
	0x8a, 0x88, 0x0f, 0x8f, 0xb0, 0x52, 0xb9, 0xca, 0x51, 0xd2, 0x69, 0x30, 0x0d, 0xe7, 0xd1, 0xe0,
	0x93, 0xd7, 0xe0, 0xca, 0x64, 0x8b, 0x65, 0x4c, 0x4f, 0x03, 0x27, 0xf4, 0x6e, 0x9e, 0x1e, 0xb4,
	0xbe, 0x37, 0xa9, 0xa8, 0x87, 0xf8, 0xb7, 0xf0, 0x78, 0x3c, 0x81, 0x3c, 0x81, 0xe9, 0x03, 0x76,
	0xfd, 0xae, 0xda, 0x24, 0xcf, 0x60, 0xf6, 0x47, 0xb3, 0xa7, 0x13, 0x13, 0xb3, 0xce, 0xed, 0xe4,
	0x9d, 0xb3, 0xf8, 0xeb, 0x80, 0x6b, 0xdb, 0x91, 0x2b, 0x70, 0xd3, 0x1c, 0x8b, 0x8d, 0xa4, 0x8e,
	0xa1, 0x43, 0x0e, 0x66, 0x7e, 0xd1, 0xa9, 0xa8, 0x47, 0x90, 0x2b, 0xb8, 0x18, 0x2e, 0xf6, 0x51,
	0x14, 0x6d, 0x59, 0xd1, 0x99, 0x6e, 0x7d, 0x77, 0x12, 0x1d, 0x27, 0xc8, 0x27, 0x38, 0x1f, 0x42,
	0x46, 0x03, 0xea, 0x1a, 0x4e, 0x3e, 0xb3, 0x22, 0xb0, 0x9d, 0x08, 0xec, 0xfb, 0x0e, 0x76, 0x77,
	0x12, 0x1d, 0xd5, 0x90, 0x57, 0x70, 0x6e, 0xae, 0xd3, 0xad, 0x36, 0xfd, 0xc0, 0x33, 0xc3, 0xe5,
	0x28, 0xba, 0xf4, 0x60, 0x3e, 0x54, 0x2e, 0xde, 0xc3, 0xcc, 0xec, 0xad, 0xf5, 0xab, 0xe2, 0x72,
	0xd0, 0x4f, 0xdb, 0xe4, 0x12, 0xe6, 0x29, 0xc6, 0xaa, 0x6d, 0x70, 0xb5, 0xe9, 0x0f, 0xb3, 0x0f,
	0x2c, 0x7f, 0xc0, 0xf8, 0x93, 0x96, 0x17, 0x7b, 0x39, 0xbf, 0xe9, 0x75, 0x7f, 0xbd, 0xcd, 0x72,
	0xb5, 0x6d, 0xd7, 0x2c, 0x11, 0x25, 0xcf, 0xc4, 0x6f, 0x7c, 0x50, 0x98, 0x6c, 0xb9, 0xfd, 0xb7,
	0x4c, 0x5c, 0x1b, 0xe3, 0xda, 0x30, 0xe3, 0xa3, 0x7f, 0x5d, 0xbb, 0x26, 0xf4, 0xe6, 0x7f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xfa, 0x32, 0xa7, 0x49, 0xc5, 0x02, 0x00, 0x00,
}
