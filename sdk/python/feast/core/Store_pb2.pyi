# @generated by generate_proto_mypy_stubs.py.  Do not edit!
import sys
from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
    EnumDescriptor as google___protobuf___descriptor___EnumDescriptor,
)

from google.protobuf.internal.containers import (
    RepeatedCompositeFieldContainer as google___protobuf___internal___containers___RepeatedCompositeFieldContainer,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from typing import (
    Iterable as typing___Iterable,
    List as typing___List,
    Optional as typing___Optional,
    Text as typing___Text,
    Tuple as typing___Tuple,
    cast as typing___cast,
)

from typing_extensions import (
    Literal as typing_extensions___Literal,
)


class Store(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    class StoreType(int):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        @classmethod
        def Name(cls, number: int) -> str: ...
        @classmethod
        def Value(cls, name: str) -> Store.StoreType: ...
        @classmethod
        def keys(cls) -> typing___List[str]: ...
        @classmethod
        def values(cls) -> typing___List[Store.StoreType]: ...
        @classmethod
        def items(cls) -> typing___List[typing___Tuple[str, Store.StoreType]]: ...
        INVALID = typing___cast(Store.StoreType, 0)
        REDIS = typing___cast(Store.StoreType, 1)
        BIGQUERY = typing___cast(Store.StoreType, 2)
        CASSANDRA = typing___cast(Store.StoreType, 3)
    INVALID = typing___cast(Store.StoreType, 0)
    REDIS = typing___cast(Store.StoreType, 1)
    BIGQUERY = typing___cast(Store.StoreType, 2)
    CASSANDRA = typing___cast(Store.StoreType, 3)

    class RedisConfig(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        host = ... # type: typing___Text
        port = ... # type: int

        def __init__(self,
            *,
            host : typing___Optional[typing___Text] = None,
            port : typing___Optional[int] = None,
            ) -> None: ...
        @classmethod
        def FromString(cls, s: bytes) -> Store.RedisConfig: ...
        def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        if sys.version_info >= (3,):
            def ClearField(self, field_name: typing_extensions___Literal[u"host",u"port"]) -> None: ...
        else:
            def ClearField(self, field_name: typing_extensions___Literal[u"host",b"host",u"port",b"port"]) -> None: ...

    class BigQueryConfig(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        projectId = ... # type: typing___Text
        datasetId = ... # type: typing___Text

        def __init__(self,
            *,
            projectId : typing___Optional[typing___Text] = None,
            datasetId : typing___Optional[typing___Text] = None,
            ) -> None: ...
        @classmethod
        def FromString(cls, s: bytes) -> Store.BigQueryConfig: ...
        def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        if sys.version_info >= (3,):
            def ClearField(self, field_name: typing_extensions___Literal[u"datasetId",u"projectId"]) -> None: ...
        else:
            def ClearField(self, field_name: typing_extensions___Literal[u"datasetId",b"datasetId",u"projectId",b"projectId"]) -> None: ...

    class CassandraConfig(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        host = ... # type: typing___Text
        port = ... # type: int

        def __init__(self,
            *,
            host : typing___Optional[typing___Text] = None,
            port : typing___Optional[int] = None,
            ) -> None: ...
        @classmethod
        def FromString(cls, s: bytes) -> Store.CassandraConfig: ...
        def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        if sys.version_info >= (3,):
            def ClearField(self, field_name: typing_extensions___Literal[u"host",u"port"]) -> None: ...
        else:
            def ClearField(self, field_name: typing_extensions___Literal[u"host",b"host",u"port",b"port"]) -> None: ...

    class Subscription(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        name = ... # type: typing___Text
        version = ... # type: typing___Text

        def __init__(self,
            *,
            name : typing___Optional[typing___Text] = None,
            version : typing___Optional[typing___Text] = None,
            ) -> None: ...
        @classmethod
        def FromString(cls, s: bytes) -> Store.Subscription: ...
        def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        if sys.version_info >= (3,):
            def ClearField(self, field_name: typing_extensions___Literal[u"name",u"version"]) -> None: ...
        else:
            def ClearField(self, field_name: typing_extensions___Literal[u"name",b"name",u"version",b"version"]) -> None: ...

    name = ... # type: typing___Text
    type = ... # type: Store.StoreType

    @property
    def subscriptions(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[Store.Subscription]: ...

    @property
    def redisConfig(self) -> Store.RedisConfig: ...

    @property
    def bigqueryConfig(self) -> Store.BigQueryConfig: ...

    @property
    def cassandraConfig(self) -> Store.CassandraConfig: ...

    def __init__(self,
        *,
        name : typing___Optional[typing___Text] = None,
        type : typing___Optional[Store.StoreType] = None,
        subscriptions : typing___Optional[typing___Iterable[Store.Subscription]] = None,
        redisConfig : typing___Optional[Store.RedisConfig] = None,
        bigqueryConfig : typing___Optional[Store.BigQueryConfig] = None,
        cassandraConfig : typing___Optional[Store.CassandraConfig] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> Store: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    if sys.version_info >= (3,):
        def HasField(self, field_name: typing_extensions___Literal[u"bigqueryConfig",u"cassandraConfig",u"config",u"redisConfig"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"bigqueryConfig",u"cassandraConfig",u"config",u"name",u"redisConfig",u"subscriptions",u"type"]) -> None: ...
    else:
        def HasField(self, field_name: typing_extensions___Literal[u"bigqueryConfig",b"bigqueryConfig",u"cassandraConfig",b"cassandraConfig",u"config",b"config",u"redisConfig",b"redisConfig"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"bigqueryConfig",b"bigqueryConfig",u"cassandraConfig",b"cassandraConfig",u"config",b"config",u"name",b"name",u"redisConfig",b"redisConfig",u"subscriptions",b"subscriptions",u"type",b"type"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions___Literal[u"config",b"config"]) -> typing_extensions___Literal["redisConfig","bigqueryConfig","cassandraConfig"]: ...
