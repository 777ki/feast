/*
 * Copyright 2018 The Feast Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package feast.serving;

import "google/protobuf/timestamp.proto";
import "feast/types/Value.proto";

option java_package = "feast.serving";
option java_outer_classname = "ServingAPIProto";
option go_package = "github.com/gojektech/feast/go-feast-proto/feast/serving";

service ServingAPI {
    // Query features from Feast
    rpc QueryFeatures (QueryFeatures.Request) returns (QueryFeatures.Response) {};
}

message QueryFeatures {
    message Request {
        // e.g. "driver", "customer", "city".
        string entityName = 1;
        // List of entity ID.
        repeated string entityId = 2;
        // List of request details, contains: featureId, type of query, and limit.
        repeated RequestDetail requestDetails = 3;
        // Filter specifying only to retrieve features having timestamp within this range.
        TimestampRange timestampRange = 4;
    }

    message Response {
        // e.g. "driver", "customer", "city".
        string entityName = 1;
        // map of entity ID and its entity's properties.
        map<string, Entity> entities = 2;
    }
}

message RequestDetail {
    // feature ID to be included in the query.
    // feature ID is in the form of [entity_name].[granularity].[feature_name]
    // e.g: "driver.day.total_accepted_booking"
    // all requested feature ID shall have same entity name.
    string featureId = 1;
    // request type either LAST or LIST.
    // LAST : return only the latest value based on timestamp.
    // LIST : return list of historical data sorted by timestamp.
    RequestType type = 2;
    // only applicable to LIST.
    // length of the returned list <= limit.
    // default = 0
    int32 limit = 3;
}

enum RequestType {
    // LAST : return only the latest value based on timestamp. (default)
    LAST = 0;
    // LIST : return list of historical data sorted by timestamp.
    LIST = 1;
}

// range of timestamp for querying
// valid timestamp range is having start <= end
message TimestampRange {
    // start time of the range query.
    google.protobuf.Timestamp start = 1;
    // end time of the range query.
    google.protobuf.Timestamp end = 2;
}

message Entity {
    // map of feature ID and its feature value.
    map<string, FeatureValueList> features = 1;
}

message FeatureValueList {
    // list of feature value
    // if "type" in "requestDetail" is "LAST", then the length will always be 1.
    // if "type" in "requestDetail" is "LIST", then the length is <= "limit".
    feast.types.ValueList valueList = 1;
    // list of timestamp of the value.
    // the i-th timestamps correspond to the i-th value.
    feast.types.TimestampList timestampList = 2;
}
