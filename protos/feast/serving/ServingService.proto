/*
 * Copyright 2018 The Feast Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package feast.serving;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "feast/types/Value.proto";

option java_package = "feast.serving";
option java_outer_classname = "ServingAPIProto";
option go_package = "github.com/gojek/feast/protos/generated/go/feast/serving";

service ServingService {
    // Retrieve version information about this Feast deployment
    rpc GetFeastServingVersion (google.protobuf.Empty) returns (GetFeastServingVersionResponse);

    // Get Feast serving storage type (online or offline)
    rpc GetFeastServingType (google.protobuf.Empty) returns (GetFeastServingTypeResponse);

    // Get online features from Feast serving
    rpc GetOnlineFeatures (GetFeaturesRequest) returns (GetOnlineFeaturesResponse);

    // Get offline features from Feast serving. This is an async job.
    rpc GetOfflineFeatures (GetFeaturesRequest) returns (GetOfflineFeaturesResponse);

    // Get the current status of an offline feature request job
    rpc GetOfflineFeaturesJobStatus (OfflineFeaturesJob.GetStatusRequest) returns (OfflineFeaturesJob.GetStatusResponse);

    // Request a signed URL where a Feast client can upload user entity data
    rpc GetOfflineFeaturesJobUploadUrl (OfflineFeaturesJob.GetUploadUrlRequest) returns (OfflineFeaturesJob.GetUploadUrlResponse);

    // Set the state of the offline feature job to complete after user entity data has been uploaded
    rpc SetOfflineFeaturesJobUploadComplete (OfflineFeaturesJob.SetUploadCompleteRequest) returns (OfflineFeaturesJob.SetUploadCompleteResponse);
}

message GetFeaturesRequest {
    repeated FeatureSet featureSets = 1;
    UserEntityData userEntityData = 2;

    message FeatureSet {
        string name = 1;
        string version = 2;
        repeated Feature features = 3;
    }

    message Feature {
        string name = 1;

        // This feature is an entity key and should be used to join this
        // feature set to the user entity table at the specified index
        int32 join_on = 2;
    }

    message UserEntityData {
        repeated UserEntityColumn columns = 1;
        repeated UserEntityRow rows = 2;
    }

    message UserEntityColumn {
        string name = 1;
        feast.types.ValueType valueType = 2;
    }

    message UserEntityRow {
        repeated feast.types.Value Value = 1;
    }
}

message GetOnlineFeaturesResponse {
    // WIP
}

message GetOfflineFeaturesResponse {
    string jobUUID = 1;
}

message OfflineFeaturesJob {
    message GetStatusRequest {
        string jobUUID = 1;
    }

    message GetStatusResponse {
        Status status = 1;
        string message = 2;

        enum Status {
            UNKNOWN = 0;
            WAITING_FOR_USER_ENTITY_DATA = 1;
            LOADING_USER_ENTITY_DATA = 2;
            BUILDING_FEATURE_DATASET = 3;
            EXPORTING_FEATURE_DATASET = 4;
            DONE = 5;
            ERROR = 6;
        }
    }

    message GetUploadUrlRequest {
        string jobUUID = 1;
        FileType fileType = 2;

        enum FileType {
            CSV = 0;
            JSON = 1;
        }
    }

    message GetUploadUrlResponse {
        // url specifies the full signed URL where a client can make a request to upload file to GCS
        string url = 1;

        HttpMethod httpMethod = 2;
        enum HttpMethod {
            PUT = 0;
        }

        // expiration specifies the timestamp the signed URL is valid until
        google.protobuf.Timestamp expiration = 3;

        // path specifies the location in GCS where the file is saved to i.e. gs://[path]
        string path = 4;
    }

    message SetUploadCompleteRequest {
        string jobUUID = 1;
    }

    message SetUploadCompleteResponse {
        bool success = 1;
    }
}

message GetFeastServingTypeResponse {
    enum type {
        ONLINE = 0;
        OFFLINE = 1;
    }
}

message GetFeastServingVersionResponse {
    string version = 1;
}