/*
 * Copyright 2018 The Feast Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package feast.serving;

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "feast/types/Value.proto";
import "feast/types/FeatureRow.proto";

option java_package = "feast.serving";
option java_outer_classname = "ServingAPIProto";
option go_package = "github.com/gojek/feast/protos/generated/go/feast/serving";

service ServingService {
    // Get version information about this Feast serving.
    rpc GetFeastServingVersion (GetFeastServingVersionRequest) returns (GetFeastServingVersionResponse);

    // Get Feast serving store type: online or batch.
    rpc GetFeastServingType (GetFeastServingTypeRequest) returns (GetFeastServingTypeResponse);

    // Get online features synchronously.
    rpc GetOnlineFeatures (GetFeaturesRequest) returns (GetOnlineFeaturesResponse);

    // Get batch features asynchronously. 
    // 
    // The client should check and reload the status of the returned job 
    // periodically to determine if the job has completed successfully or with 
    // an error. If the job completes successfully, the client shoud call 
    // GetBatchFeaturesFromCompletedJob to retrieve the feature values.
    rpc GetBatchFeatures (GetFeaturesRequest) returns (GetBatchFeaturesResponse);

    // Get the URI(s) to download batch feature values from a succesful download job.
    rpc GetBatchFeaturesFromCompletedJob (GetBatchFeaturesFromCompletedJobRequest) returns (GetBatchFeaturesFromCompletedJobResponse);

    // Get the URI prefix where the client can upload files to be accessed by Feast serving.
    rpc GetStagingLocation (GetStagingLocationRequest) returns (GetStagingLocationResponse);

    // Load batch features from a list of source URIs asynchronously. The source 
    // URIs must represent a feature set of a specific version.
    rpc LoadBatchFeatures (LoadBatchFeaturesRequest) returns (LoadBatchFeaturesResponse);
    
    // Reload the job status with the latest state.
    rpc ReloadJobStatus(ReloadJobStatusRequest) returns (ReloadJobStatusResponse);
}

message GetFeastServingVersionRequest {}

message GetFeastServingVersionResponse {
    string version = 1;
}

message GetFeastServingTypeRequest {}

message GetFeastServingTypeResponse {
    FeastServingType type = 1;
}

message GetFeaturesRequest {
    // List of feature sets and their features that are being retrieved
    repeated FeatureSet feature_sets = 1;

    // Dataset containing timestamp and entity id data. Used during retrieval of feature rows
    // and for joining feature rows into a final dataset
    EntityDataset entity_dataset = 2;

    message FeatureSet {
        // Feature set name
        string name = 1;

        // Feature set version
        int32 version = 2;

        // Features that should be retrieved from this feature set
        repeated string feature_names = 3;

        // The features will be retrieved if:
        // user_provided_unix_epoch - max_age  <= event_timestamp < user_provided_unix_epoch
        //
        // If unspecified the default max_age specified in FeatureSetSpec will 
        // be used.
        google.protobuf.Duration max_age = 4;
    }

    message EntityDataset {
        // List of entity names contained within this incoming request. Each entity name is globally
        // unique within Feast. The user is assumed to have used the exact column name in their
        // EntityDataset if they are providing this dataset through a batch process.
        repeated string entity_names = 1;

        // List of Unix epoch entity_timestamp and entity_id values
        repeated EntityDatasetRow entity_dataset_rows = 2;
    }

    // EntityDatasetRow specifies:
    // - the timestamp range over which feature values should be retrieved (required for batch serving)
    // - the specific entity ids that should be retrieved (required for online serving)
    //
    // If there are duplicate entity ids for the same timestamp range, only the 
    // one with the latest event_timestamp will be retrieved.
    //
    // Entity ids may be ommitted for batch features retrieval. In this case,
    // all entities with distinct entity ids within the valid timestamp range 
    // will be retrieved.
    message EntityDatasetRow  {
        // entity_timestamp is the upper bound of the timestamp range over 
        // which the feature values should be retrieved.
        // 
        // The timestamp range is defined as follows:
        // entity_timestamp - max_age <= event_timestamp < entity_timestamp
        google.protobuf.Timestamp entity_timestamp = 0;

        // The entity ids for which the feature values should be retrieved.
        // 
        // The order of the values should follow that in entity_names in EntityDataset.
        // For online serving, it is required to specify entity_ids.
        // For batch serving, it is optional.
        repeated feast.types.Value entity_ids = 1;
    }
}

message GetOnlineFeaturesResponse {
    // A FeatureDataSet is returned for each feature set in the incoming request
    repeated FeatureDataset feature_datasets = 2;

    // The FeatureDataSet contains information about the Feature Set in the incoming request,
    // as well as feature data that can be joined to the incoming EntityDataSet. The row count
    // for the returning FeatureDataSet will match that of the row count for the incoming
    // EntityDataSet.
    // If any of the keys do not have values, empty feature rows will be returned.
    message FeatureDataset {
        // Feature set name
        string name = 1;

        // Feature set version
        int32 version = 2;

        // Each feature data set contains a list of feature rows. The timestamps within the row
        // are the original event timestamps from when that row was written to the backing store.
        // When these FeatureRows are joined to the EntityDataSetRows, the FeatureRow timestamps
        // will be dropped in favour of the EntityDataSetRow timestamp.
        repeated feast.types.FeatureRow feature_rows = 3;
    }
}

message GetBatchFeaturesResponse {
    Job job = 1;
}

message GetBatchFeaturesFromCompletedJobRequest {
    Job job = 1;
}

message GetBatchFeaturesFromCompletedJobResponse {
    // The list of URIs for the files containing the batch feature values requested.
    // 
    // Feast may retrieve the batch features and save them into multiple sharded
    // files for improving performance and reliability. The client is expected
    // to join these sharded files manually.
    repeated string download_uris = 1;

    // Data format of the file. All files will have the same data format.
    // For CSV, the files will contain both feature values and a column header.
    DataFormat data_format = 2; 
}

message GetStagingLocationRequest {}

message GetStagingLocationResponse {
    // The URI where the client can upload the files containing feature values.
    //
    // This URI acts as a staging location before the files are read by Feast.
    // The client should upload their feature values files to the path prefixed
    // by this URI. Note that the returned URI contains no trailing forward 
    // slash, the client should add a forward slash before appending the 
    // rest of the file paths to be uploaded.
    //
    // For example, 
    // If the URI is "gs://bucket/staging", the client should upload "file_1.csv" 
    // to "gs://bucket/staging/file_1.csv"
    string uri = 1;
}

message LoadBatchFeaturesRequest {
    // The feature set name for this batch features.
    string feature_set_name = 1;

    // The version of the feature set for this batch features.
    int32 feature_set_version = 2;

    // Source URIs for the files containing feature values that should be loaded
    // to Feast. 
    //
    // The client should call GetStagingLocation beforehand to get the URI to 
    // upload the feature values files. Feast may not load the files in the 
    // source URIs in order.
    // 
    // Example source URIs: 
    // - gs://bucket/features_1.csv
    // - gs://bucket/features_2.csv
    repeated string source_uris = 3;
    
    // Data format for the feature values file. 
    // 
    // All files must be of the same data format. If the data format is CSV, 
    // the first row must be a column header and Feast will infer the data types
    // of the feature values. For more deterministic and less error prone 
    // batch feature loading, the client should use AVRO or PARQUET data format.
    //
    // Feast expects the column names of the features from the file to match 
    // the entity names or feature names in the feature set. Although the column
    // names need not match all the features names in the feature set, at least 
    // one of the column names must match one of the entity names. If not, 
    // the load job will fail.
    DataFormat data_format = 4;

    
}

message LoadBatchFeaturesResponse {
    Job job = 1;
}

message ReloadJobStatusRequest {
    Job job = 1;
}

message ReloadJobStatusResponse {
    Job job = 1;
}

enum FeastServingType {
    FEAST_SERVING_TYPE_INVALID = 0;
    // Online serving receives entity data directly and synchronously and will 
    // respond immediately.
    FEAST_SERVING_TYPE_ONLINE = 1;
    // Batch serving receives entity data asynchronously and orchestrates the 
    // retrieval through a staging location.
    FEAST_SERVING_TYPE_BATCH = 2;
}

enum JobType {
    JOB_TYPE_INVALID = 0;
    JOB_TYPE_DOWNLOAD = 1;
    JOB_TYPE_UPLOAD = 2;
}

enum JobStatus {
    JOB_STATUS_INVALID = 0;
    JOB_STATUS_PENDING = 1;
    JOB_STATUS_RUNNING = 2;
    JOB_STATUS_DONE = 3;
}

enum DataFormat {
    DATA_FORMAT_INVALID = 0;
    DATA_FORMAT_CSV = 1;
    DATA_FORMAT_PARQUET = 2;
    DATA_FORMAT_AVRO = 3;
    DATA_FORMAT_JSON = 4;
}

message Job {
    string id = 1;
    // Output only. The type of the job.
    JobType type = 2;
    // Output only. Current state of the job.
    JobStatus status = 3;
    // Output only. If not empty, the job has failed with this error message.
    string error = 4;
}
