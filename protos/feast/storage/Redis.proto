/*
 * Copyright 2018 The Feast Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
import "google/protobuf/timestamp.proto";

import "feast/types/Value.proto";

package feast.storage;

option java_outer_classname = "RedisProto";
option java_package = "feast.storage";
option go_package = "github.com/gojek/feast/protos/generated/go/feast/storage";

message RedisBucketKey {
  // Field number 1 is reserved for a future distributing hash if needed
  // (for when redis is clustered).

  // Entity key from the FeatureRow
  string entityKey = 2;

  /**
   * This should be the first 7 characters of a sha1 of the featureId
   * This is just to save storage space as it's kept in memory.
   */
  string featureIdSha1Prefix = 3;

  /**
   * This groups a feature's values (for different eventTimestamps),
   * into buckets so many can be retrieved together.
   *
   * See FeatureRowToRedisMutationDoFn.
   * bucketId = roundedToGranularity(eventTimestamp).seconds / bucketSize.seconds
   */
  fixed64 bucketId = 4;
}

/**
 * Because in redis features are stored as a key per feature not per
 * feature row, we need the event timestamp in the value.
 */
message RedisBucketValue {
  feast.types.Value value = 1;
  google.protobuf.Timestamp eventTimestamp = 2;
}


/**
 * This allows us to group multiple bucket values together in a
 * single list to make it easier to keep sets together
 */
message RedisBucketValueList {
  repeated RedisBucketValue values = 1;
}
