//
// Copyright 2018 The Feast Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package feast.core;

option go_package = "github.com/gojek/feast/sdk/go/protos/feast/core";
option java_outer_classname = "CoreServiceProto";
option java_package = "feast.core";

import "feast/core/FeatureSet.proto";
import "feast/core/Store.proto";

service CoreService {
    // Retrieve version information about this Feast deployment
    rpc GetFeastCoreVersion (GetFeastCoreVersionRequest) returns (GetFeastCoreVersionResponse);

    // Retrieve feature set details given a filter.
    // Returns all featureSets matching that filter.
    rpc GetFeatureSets (GetFeatureSetsRequest) returns (GetFeatureSetsResponse);

    // Retrieve store details given a filter.
    // Returns all stores matching that filter.
    rpc GetStores (GetStoresRequest) returns (GetStoresResponse);

    // Idempotent creation of feature set. Will not create a new feature set if schema does not change
    rpc ApplyFeatureSet (ApplyFeatureSetRequest) returns (ApplyFeatureSetResponse);
}

// Retrieves details for all versions of a specific feature set
message GetFeatureSetsRequest {
    message Filter {
        string feature_set_name = 1;
        string feature_set_version = 2;
    }

    Filter filter = 1;
}

message GetFeatureSetsResponse {
    repeated feast.core.FeatureSetSpec feature_sets = 1;
}

message GetStoresRequest {
    message Filter {
        string name = 1;
    }

    Filter filter = 1;
}

message GetStoresResponse {
    repeated feast.core.Store store = 1;
}

message ApplyFeatureSetRequest {
    // Feature set version and source will be ignored
    feast.core.FeatureSetSpec feature_set = 1;
}

message ApplyFeatureSetResponse {
    enum Status {
        // Latest feature set version is consistent with provided feature set
        NO_CHANGE = 0;

        // New feature set or feature set version created
        CREATED = 1;

        // Error occurred while trying to apply changes
        ERROR = 2;
    }

    // Feature set response has been enriched with version and source information
    feast.core.FeatureSetSpec feature_set = 1;
    Status status = 2;
}

message GetFeastCoreVersionRequest {}

message GetFeastCoreVersionResponse {
    string version = 1;
}
