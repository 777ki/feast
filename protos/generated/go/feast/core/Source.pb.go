// Code generated by protoc-gen-go. DO NOT EDIT.
// source: feast/core/Source.proto

package core

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Source_SourceType int32

const (
	Source_INVALID Source_SourceType = 0
	Source_KAFKA   Source_SourceType = 1
)

var Source_SourceType_name = map[int32]string{
	0: "INVALID",
	1: "KAFKA",
}

var Source_SourceType_value = map[string]int32{
	"INVALID": 0,
	"KAFKA":   1,
}

func (x Source_SourceType) String() string {
	return proto.EnumName(Source_SourceType_name, int32(x))
}

func (Source_SourceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4d161c4e53091468, []int{0, 0}
}

type Source struct {
	// The kind of message source the import job should connect to
	// in order to retrieve FeatureRow value
	Type Source_SourceType `protobuf:"varint,1,opt,name=type,proto3,enum=feast.core.Source_SourceType" json:"type,omitempty"`
	// Optional. Configuration to establish connection to the message source.
	// The available options vary depending on the source type.
	//
	// For SourceType.KAFKA, the following key value options are accepted:
	// - bootstrapServers: [comma delimited value of host[:port]]
	// - topics: [comma delimited value of topic names. This value is provisioned by core and should not be set by the user.]
	// - consumerGroupId: [optional, consumer group id for the Kafka consumer in the import job. For import job to support propert checkpointing and resuming from a failed job, this value should be provided.]
	Options              map[string]string `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Source) Reset()         { *m = Source{} }
func (m *Source) String() string { return proto.CompactTextString(m) }
func (*Source) ProtoMessage()    {}
func (*Source) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d161c4e53091468, []int{0}
}

func (m *Source) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Source.Unmarshal(m, b)
}
func (m *Source) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Source.Marshal(b, m, deterministic)
}
func (m *Source) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Source.Merge(m, src)
}
func (m *Source) XXX_Size() int {
	return xxx_messageInfo_Source.Size(m)
}
func (m *Source) XXX_DiscardUnknown() {
	xxx_messageInfo_Source.DiscardUnknown(m)
}

var xxx_messageInfo_Source proto.InternalMessageInfo

func (m *Source) GetType() Source_SourceType {
	if m != nil {
		return m.Type
	}
	return Source_INVALID
}

func (m *Source) GetOptions() map[string]string {
	if m != nil {
		return m.Options
	}
	return nil
}

func init() {
	proto.RegisterEnum("feast.core.Source_SourceType", Source_SourceType_name, Source_SourceType_value)
	proto.RegisterType((*Source)(nil), "feast.core.Source")
	proto.RegisterMapType((map[string]string)(nil), "feast.core.Source.OptionsEntry")
}

func init() { proto.RegisterFile("feast/core/Source.proto", fileDescriptor_4d161c4e53091468) }

var fileDescriptor_4d161c4e53091468 = []byte{
	// 252 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4f, 0x4b, 0x4d, 0x2c,
	0x2e, 0xd1, 0x4f, 0xce, 0x2f, 0x4a, 0xd5, 0x0f, 0xce, 0x2f, 0x2d, 0x4a, 0x4e, 0xd5, 0x2b, 0x28,
	0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x02, 0x4b, 0xe8, 0x81, 0x24, 0x94, 0x6e, 0x30, 0x72, 0xb1, 0x41,
	0x24, 0x85, 0x0c, 0xb9, 0x58, 0x4a, 0x2a, 0x0b, 0x52, 0x25, 0x18, 0x15, 0x18, 0x35, 0xf8, 0x8c,
	0x64, 0xf5, 0x10, 0xaa, 0xf4, 0xa0, 0xda, 0x21, 0x54, 0x48, 0x65, 0x41, 0x6a, 0x10, 0x58, 0xa9,
	0x90, 0x25, 0x17, 0x7b, 0x7e, 0x41, 0x49, 0x66, 0x7e, 0x5e, 0xb1, 0x04, 0x93, 0x02, 0xb3, 0x06,
	0xb7, 0x91, 0x3c, 0x16, 0x5d, 0xfe, 0x10, 0x15, 0xae, 0x79, 0x25, 0x45, 0x95, 0x41, 0x30, 0xf5,
	0x52, 0x56, 0x5c, 0x3c, 0xc8, 0x12, 0x42, 0x02, 0x5c, 0xcc, 0xd9, 0xa9, 0x95, 0x60, 0xcb, 0x39,
	0x83, 0x40, 0x4c, 0x21, 0x11, 0x2e, 0xd6, 0xb2, 0xc4, 0x9c, 0xd2, 0x54, 0x09, 0x26, 0xb0, 0x18,
	0x84, 0x63, 0xc5, 0x64, 0xc1, 0xa8, 0xa4, 0xc2, 0xc5, 0x85, 0x70, 0x8a, 0x10, 0x37, 0x17, 0xbb,
	0xa7, 0x5f, 0x98, 0xa3, 0x8f, 0xa7, 0x8b, 0x00, 0x83, 0x10, 0x27, 0x17, 0xab, 0xb7, 0xa3, 0x9b,
	0xb7, 0xa3, 0x00, 0xa3, 0x53, 0x00, 0x17, 0x92, 0x47, 0x9d, 0xb8, 0x21, 0x3a, 0x02, 0x40, 0x21,
	0x10, 0x65, 0x9a, 0x9e, 0x59, 0x92, 0x51, 0x9a, 0xa4, 0x97, 0x9c, 0x9f, 0xab, 0x9f, 0x9e, 0x9f,
	0x95, 0x9a, 0xad, 0x0f, 0x09, 0x2b, 0x70, 0xf8, 0x14, 0xeb, 0xa7, 0xa7, 0xe6, 0xa5, 0x16, 0x25,
	0x96, 0xa4, 0xa6, 0xe8, 0xa7, 0xe7, 0xeb, 0x23, 0x42, 0x31, 0x89, 0x0d, 0x2c, 0x6f, 0x0c, 0x08,
	0x00, 0x00, 0xff, 0xff, 0x00, 0xfb, 0xed, 0xcb, 0x5a, 0x01, 0x00, 0x00,
}
