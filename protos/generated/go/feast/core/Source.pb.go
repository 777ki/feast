// Code generated by protoc-gen-go. DO NOT EDIT.
// source: feast/core/Source.proto

package core

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SourceType int32

const (
	SourceType_INVALID SourceType = 0
	SourceType_KAFKA   SourceType = 1
)

var SourceType_name = map[int32]string{
	0: "INVALID",
	1: "KAFKA",
}

var SourceType_value = map[string]int32{
	"INVALID": 0,
	"KAFKA":   1,
}

func (x SourceType) String() string {
	return proto.EnumName(SourceType_name, int32(x))
}

func (SourceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4d161c4e53091468, []int{0}
}

type Source struct {
	// The kind of data source Feast should connect to in order to retrieve FeatureRow value
	Type SourceType `protobuf:"varint,1,opt,name=type,proto3,enum=feast.core.SourceType" json:"type,omitempty"`
	// Source specific configuration
	//
	// Types that are valid to be assigned to SourceConfig:
	//	*Source_KafkaSourceConfig
	SourceConfig         isSource_SourceConfig `protobuf_oneof:"source_config"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Source) Reset()         { *m = Source{} }
func (m *Source) String() string { return proto.CompactTextString(m) }
func (*Source) ProtoMessage()    {}
func (*Source) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d161c4e53091468, []int{0}
}

func (m *Source) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Source.Unmarshal(m, b)
}
func (m *Source) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Source.Marshal(b, m, deterministic)
}
func (m *Source) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Source.Merge(m, src)
}
func (m *Source) XXX_Size() int {
	return xxx_messageInfo_Source.Size(m)
}
func (m *Source) XXX_DiscardUnknown() {
	xxx_messageInfo_Source.DiscardUnknown(m)
}

var xxx_messageInfo_Source proto.InternalMessageInfo

func (m *Source) GetType() SourceType {
	if m != nil {
		return m.Type
	}
	return SourceType_INVALID
}

type isSource_SourceConfig interface {
	isSource_SourceConfig()
}

type Source_KafkaSourceConfig struct {
	KafkaSourceConfig *KafkaSourceConfig `protobuf:"bytes,2,opt,name=kafka_source_config,json=kafkaSourceConfig,proto3,oneof"`
}

func (*Source_KafkaSourceConfig) isSource_SourceConfig() {}

func (m *Source) GetSourceConfig() isSource_SourceConfig {
	if m != nil {
		return m.SourceConfig
	}
	return nil
}

func (m *Source) GetKafkaSourceConfig() *KafkaSourceConfig {
	if x, ok := m.GetSourceConfig().(*Source_KafkaSourceConfig); ok {
		return x.KafkaSourceConfig
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Source) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Source_KafkaSourceConfig)(nil),
	}
}

type KafkaSourceConfig struct {
	// - bootstrapServers: [comma delimited value of host[:port]]
	BootstrapServers string `protobuf:"bytes,1,opt,name=bootstrap_servers,json=bootstrapServers,proto3" json:"bootstrap_servers,omitempty"`
	// - topics: [Kafka topic name. This value is provisioned by core and should not be set by the user.]
	Topic                string   `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KafkaSourceConfig) Reset()         { *m = KafkaSourceConfig{} }
func (m *KafkaSourceConfig) String() string { return proto.CompactTextString(m) }
func (*KafkaSourceConfig) ProtoMessage()    {}
func (*KafkaSourceConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d161c4e53091468, []int{1}
}

func (m *KafkaSourceConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KafkaSourceConfig.Unmarshal(m, b)
}
func (m *KafkaSourceConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KafkaSourceConfig.Marshal(b, m, deterministic)
}
func (m *KafkaSourceConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KafkaSourceConfig.Merge(m, src)
}
func (m *KafkaSourceConfig) XXX_Size() int {
	return xxx_messageInfo_KafkaSourceConfig.Size(m)
}
func (m *KafkaSourceConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_KafkaSourceConfig.DiscardUnknown(m)
}

var xxx_messageInfo_KafkaSourceConfig proto.InternalMessageInfo

func (m *KafkaSourceConfig) GetBootstrapServers() string {
	if m != nil {
		return m.BootstrapServers
	}
	return ""
}

func (m *KafkaSourceConfig) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func init() {
	proto.RegisterEnum("feast.core.SourceType", SourceType_name, SourceType_value)
	proto.RegisterType((*Source)(nil), "feast.core.Source")
	proto.RegisterType((*KafkaSourceConfig)(nil), "feast.core.KafkaSourceConfig")
}

func init() { proto.RegisterFile("feast/core/Source.proto", fileDescriptor_4d161c4e53091468) }

var fileDescriptor_4d161c4e53091468 = []byte{
	// 280 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0x51, 0x4b, 0xf3, 0x30,
	0x14, 0x86, 0xd7, 0x8f, 0x6f, 0x93, 0x9e, 0xa2, 0xb6, 0x51, 0x74, 0x37, 0xc2, 0x18, 0x5e, 0x8c,
	0x09, 0x0d, 0x4c, 0xfc, 0x01, 0xad, 0x22, 0x8e, 0x8a, 0x8e, 0x4e, 0x76, 0xe1, 0x4d, 0x69, 0xeb,
	0x69, 0xad, 0xc5, 0x9d, 0x92, 0x64, 0xc2, 0xfe, 0x88, 0xbf, 0x57, 0x9a, 0x80, 0x9d, 0x7a, 0x99,
	0xf3, 0x3c, 0x6f, 0x38, 0x79, 0x03, 0xa7, 0x05, 0xa6, 0x52, 0xf1, 0x9c, 0x04, 0xf2, 0x25, 0x6d,
	0x44, 0x8e, 0x7e, 0x23, 0x48, 0x11, 0x03, 0x0d, 0xfc, 0x16, 0x8c, 0x3f, 0x2d, 0x18, 0x18, 0xc8,
	0xa6, 0xf0, 0x5f, 0x6d, 0x1b, 0x1c, 0x5a, 0x23, 0x6b, 0x72, 0x30, 0x3b, 0xf1, 0x3b, 0xcb, 0x37,
	0xc6, 0xd3, 0xb6, 0xc1, 0x58, 0x3b, 0xec, 0x11, 0x8e, 0xea, 0xb4, 0xa8, 0xd3, 0x44, 0x6a, 0x92,
	0xe4, 0xb4, 0x2e, 0xaa, 0x72, 0xf8, 0x6f, 0x64, 0x4d, 0x9c, 0xd9, 0xd9, 0x6e, 0x34, 0x6a, 0x35,
	0x93, 0xbf, 0xd6, 0xd2, 0x5d, 0x2f, 0xf6, 0xea, 0xdf, 0xc3, 0xf0, 0x10, 0xf6, 0x7f, 0x5c, 0x35,
	0x5e, 0x81, 0xf7, 0x27, 0xca, 0x2e, 0xc0, 0xcb, 0x88, 0x94, 0x54, 0x22, 0x6d, 0x12, 0x89, 0xe2,
	0x03, 0x85, 0xd4, 0xfb, 0xda, 0xb1, 0xfb, 0x0d, 0x96, 0x66, 0xce, 0x8e, 0xa1, 0xaf, 0xa8, 0xa9,
	0x72, 0xbd, 0x95, 0x1d, 0x9b, 0xc3, 0xf4, 0x1c, 0xa0, 0x7b, 0x0d, 0x73, 0x60, 0x6f, 0xfe, 0xb0,
	0x0a, 0xee, 0xe7, 0x37, 0x6e, 0x8f, 0xd9, 0xd0, 0x8f, 0x82, 0xdb, 0x28, 0x70, 0xad, 0x70, 0x01,
	0x3b, 0x25, 0x85, 0x8e, 0x49, 0x2c, 0xda, 0xf6, 0x9e, 0xaf, 0xca, 0x4a, 0xbd, 0x6e, 0x32, 0x3f,
	0xa7, 0x77, 0x5e, 0xd2, 0x1b, 0xd6, 0xdc, 0xf4, 0xac, 0xbb, 0x95, 0xbc, 0xc4, 0x35, 0x8a, 0x54,
	0xe1, 0x0b, 0x2f, 0x89, 0x77, 0x3f, 0x90, 0x0d, 0x34, 0xbf, 0xfc, 0x0a, 0x00, 0x00, 0xff, 0xff,
	0xbb, 0x88, 0x69, 0xa9, 0x96, 0x01, 0x00, 0x00,
}
