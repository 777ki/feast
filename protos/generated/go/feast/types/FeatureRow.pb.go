// Code generated by protoc-gen-go. DO NOT EDIT.
// source: feast/types/FeatureRow.proto

package types

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FeatureRow struct {
	// Features in the feature row.
	Fields []*Field `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
	// Timestamp of the feature row. While the actual definition of this timestamp may vary
	// depending on the upstream feature creation pipelines, this is the timestamp that Feast
	// will use to perform joins, determine latest values, and coalesce rows.
	EventTimestamp *timestamp.Timestamp `protobuf:"bytes,3,opt,name=eventTimestamp,proto3" json:"eventTimestamp,omitempty"`
	// Complete reference to the featureSet this featureRow belongs to, in the form of
	// featureSetName:version. This value will be used by the feast ingestion job to filter
	// rows, and write the values to the correct tables.
	FeatureSet           string   `protobuf:"bytes,6,opt,name=featureSet,proto3" json:"featureSet,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FeatureRow) Reset()         { *m = FeatureRow{} }
func (m *FeatureRow) String() string { return proto.CompactTextString(m) }
func (*FeatureRow) ProtoMessage()    {}
func (*FeatureRow) Descriptor() ([]byte, []int) {
	return fileDescriptor_fbbea9c89787d1c7, []int{0}
}

func (m *FeatureRow) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeatureRow.Unmarshal(m, b)
}
func (m *FeatureRow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeatureRow.Marshal(b, m, deterministic)
}
func (m *FeatureRow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureRow.Merge(m, src)
}
func (m *FeatureRow) XXX_Size() int {
	return xxx_messageInfo_FeatureRow.Size(m)
}
func (m *FeatureRow) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureRow.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureRow proto.InternalMessageInfo

func (m *FeatureRow) GetFields() []*Field {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *FeatureRow) GetEventTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.EventTimestamp
	}
	return nil
}

func (m *FeatureRow) GetFeatureSet() string {
	if m != nil {
		return m.FeatureSet
	}
	return ""
}

func init() {
	proto.RegisterType((*FeatureRow)(nil), "feast.types.FeatureRow")
}

func init() { proto.RegisterFile("feast/types/FeatureRow.proto", fileDescriptor_fbbea9c89787d1c7) }

var fileDescriptor_fbbea9c89787d1c7 = []byte{
	// 235 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0xc6, 0x89, 0x85, 0x80, 0x13, 0x50, 0xd8, 0x8b, 0x21, 0x88, 0x06, 0x4f, 0xc1, 0xc3, 0x0c,
	0x54, 0xf0, 0x01, 0x72, 0xf0, 0x2c, 0x51, 0x3c, 0x78, 0x4b, 0xec, 0x64, 0x8d, 0x36, 0x9d, 0x90,
	0x9d, 0x28, 0xbe, 0x8b, 0x0f, 0x2b, 0xdd, 0xb5, 0x36, 0xf6, 0xba, 0xbf, 0x6f, 0xbe, 0x3f, 0x0b,
	0xe7, 0x2d, 0xd7, 0x4e, 0x49, 0xbf, 0x06, 0x76, 0x74, 0xc7, 0xb5, 0x4e, 0x23, 0x57, 0xf2, 0x89,
	0xc3, 0x28, 0x2a, 0x26, 0xf1, 0x14, 0x3d, 0xcd, 0x2e, 0xad, 0x88, 0x5d, 0x33, 0x79, 0xd4, 0x4c,
	0x2d, 0x69, 0xd7, 0xb3, 0xd3, 0xba, 0x1f, 0x82, 0x3a, 0x3b, 0xfb, 0xe7, 0xd5, 0xf1, 0x7a, 0x15,
	0xc0, 0xd5, 0x77, 0x04, 0xb0, 0xf7, 0x36, 0xd7, 0x10, 0xb7, 0x5b, 0xea, 0xd2, 0xa3, 0x7c, 0x51,
	0x24, 0x4b, 0x83, 0xb3, 0x18, 0xf4, 0x87, 0xd5, 0xaf, 0xc2, 0x94, 0x70, 0xc2, 0x1f, 0xbc, 0xd1,
	0xc7, 0x5d, 0x56, 0xba, 0xc8, 0xa3, 0x22, 0x59, 0x66, 0x18, 0xda, 0xe0, 0xae, 0x0d, 0xfe, 0x29,
	0xaa, 0x83, 0x0b, 0x73, 0x01, 0xd0, 0x86, 0xf4, 0x07, 0xd6, 0x34, 0xce, 0xa3, 0xe2, 0xb8, 0x9a,
	0xbd, 0x94, 0x4f, 0x30, 0xdf, 0x59, 0x9e, 0xee, 0xab, 0xde, 0x6f, 0xcd, 0x9f, 0x6f, 0x6d, 0xa7,
	0xaf, 0x53, 0x83, 0x2f, 0xd2, 0x93, 0x95, 0x37, 0x7e, 0xa7, 0x30, 0xd4, 0x47, 0x3b, 0xb2, 0xbc,
	0xe1, 0xb1, 0x56, 0x5e, 0x91, 0x15, 0x9a, 0x7d, 0x41, 0x13, 0x7b, 0xc1, 0xcd, 0x4f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x9b, 0x8a, 0x44, 0xcc, 0x64, 0x01, 0x00, 0x00,
}
